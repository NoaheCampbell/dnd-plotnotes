generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model campaigns {
  id             Int        @id @default(autoincrement())
  title          String
  description    String?
  image_url      String?
  image_public_id String?
  progress       Int?       @default(0)
  sessions_count Int?       @default(0)
  players_count  Int?       @default(0)
  last_played    DateTime?  @db.Timestamp(6)
  created_at     DateTime   @default(now()) @db.Timestamp(6)
  active         Boolean    @default(true)
  notes          notes[]
  npcs           npcs[]
  sessions       sessions[]
  locations      locations[]
  items          items[]
  encounters     encounters[]
  flowchart      Flowchart[]
}

model notes {
  id                 Int        @id @default(autoincrement())
  campaign_id        Int?
  title              String
  content            String?
  created_at         DateTime?  @default(now()) @db.Timestamp(6)
  campaigns          campaigns? @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  entity_links       EntityNoteLink[]
}

model npcs {
  id                 Int        @id @default(autoincrement())
  campaign_id        Int?
  name               String
  race               String?
  class              String?
  alignment          String?
  age                String?
  hair_color         String?
  eye_color          String?
  skin_color         String?
  height             String?
  weight             String?
  personality_traits String?
  ideals             String?
  bonds              String?
  flaws              String?
  backstory          String?
  location_name      String?
  image_url          String?
  image_public_id    String?
  campaigns          campaigns? @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  encounters         encounters[]
}

model sessions {
  id          Int        @id @default(autoincrement())
  campaign_id Int?
  date        DateTime   @db.Timestamp(6)
  location    String?
  notes       String?
  campaigns   campaigns? @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model locations {
  id          Int      @id @default(autoincrement())
  name        String
  type        String?
  description String?
  map_url     String?
  map_public_id String?
  campaign_id Int?
  campaigns   campaigns? @relation(fields: [campaign_id], references: [id])
  encounters  encounters[]

  // Fields for location sequencing
  next_location_id Int?      @unique // ID of the next location in a sequence
  next_location    locations?  @relation("LocationSequence", fields: [next_location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  previous_location locations? @relation("LocationSequence") // Inverse relation: this location can be a next_location for another one
}

model items {
  id          Int      @id @default(autoincrement())
  name        String
  type        String?
  rarity      String?
  image_url   String?
  image_public_id String?
  campaign_id Int?
  campaigns   campaigns? @relation(fields: [campaign_id], references: [id])
}

model encounters {
  id          Int        @id @default(autoincrement())
  campaign_id Int?
  title       String
  difficulty  String?
  creatures   Int?
  campaigns   campaigns? @relation(fields: [campaign_id], references: [id])

  location_id Int?
  location    locations? @relation(fields: [location_id], references: [id])

  npcs        npcs[]
}

model settings {
  id                Int      @id @default(autoincrement())
  theme             String   @default("system")
  session_reminders Boolean  @default(true)
  campaign_updates  Boolean  @default(true)
  new_content       Boolean  @default(true)
  players_count     Int      @default(4)
  session_duration  Int      @default(3)
  default_location  String?
  auto_backup       Boolean  @default(true)
  backup_frequency  String   @default("daily")
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}

model Flowchart {
  id          String   @id @default(cuid())
  name        String
  data        Json // To store React Flow nodes and edges
  campaign    campaigns @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([campaignId])
}

model EntityNoteLink {
  note_id            Int
  linked_entity_id   Int    // ID of the NPC, Location, etc.
  linked_entity_type String // "npc", "location", "encounter"

  note    notes @relation(fields: [note_id], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([note_id, linked_entity_id, linked_entity_type])
  @@index([linked_entity_id, linked_entity_type])
}